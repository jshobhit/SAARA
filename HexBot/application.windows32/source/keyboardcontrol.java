import processing.core.*; 
import processing.data.*; 
import processing.event.*; 
import processing.opengl.*; 

import processing.serial.*; 
import g4p_controls.*; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

public class keyboardcontrol extends PApplet {



// The serial port:
Serial x;       


int fillVal = color(0);

public void setup() {
  
  noStroke();
  background(0xffF2F2F2);
  createGUI();
  //printArray(Serial.list()); // do this to find your arduino
  // Open the port you are using at the rate you want:
  x = new Serial(this, Serial.list()[0], 115200);
  x.clear();
}
String input = "";

public void draw() { 

}

//The keyPressed() function is called once every time a key is pressed.
// see https://processing.org/reference/keyCode.html

public void keyPressed() {
  if (key == CODED) {
    switch(keyCode) {
    case UP: 
      x.write('u');
      break;
    case DOWN: 
      x.write('d');
      break;    
    case LEFT: 
      x.write('l');
      break;    
    case RIGHT: 
      x.write('r');
      break;
    case CONTROL:
      x.write('m');
      break;
     default:
     break;
    }
  } 
  else if(keyPressed){
      switch(key){
        case 'w':
          x.write('w');
          break;
        case 's':
          x.write('s');
          break;
        case 'a':
          x.write('a');
          break;
        case 'd':
          x.write('x');
          break;
        case 'W':
          x.write('W');
          break;
        case 'S':
          x.write('S');
          break;
        case 'A':
          x.write('A');
          break;
        case 'D':
          x.write('X');
          break;
        default:
          break; 
      }
    }
    
}

public void serialEvent(Serial p) {
  switch(p.read()) {
  case 'q':
    label1.setText("     ");
    label1.setText("Current Mode : 1");
    break;
  case 'Q':
    label1.setText("     ");
    label1.setText("Current Mode : 2");
    break;
  default: 
    break;
  }
} 
/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void imgButton1_click1(GImageButton source, GEvent event) { //_CODE_:imgButton1:252065:
   println("imgButton1 - GImageButton >> GEvent." + event + " @ " + millis());
} //_CODE_:imgButton1:252065:

public void torquebut_click1(GButton source, GEvent event) { //_CODE_:torquebut:685831:
  x.write('t');
  //x.write(t);
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:torquebut:685831:

public void imgButton2_click1(GImageButton source, GEvent event) { //_CODE_:imgButton2:208253:
  println("imgButton2 - GImageButton >> GEvent." + event + " @ " + millis());
} //_CODE_:imgButton2:208253:

public void pumpbut_click1(GButton source, GEvent event) { //_CODE_:pumpbut:759585:
  x.write('p');
  println("pumpbut - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:pumpbut:759585:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  imgButton1 = new GImageButton(this, 5, -4, new String[] { "Picture1.png", "Picture1.png", "Picture1.png" } );
  imgButton1.addEventHandler(this, "imgButton1_click1");
  torquebut = new GButton(this, 17, 376, 126, 28);
  torquebut.setText("Torque On/Off");
  torquebut.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  torquebut.addEventHandler(this, "torquebut_click1");
  imgButton2 = new GImageButton(this, 385, 355, new String[] { "Picture2.png", "Picture2.png", "Picture2.png" } );
  imgButton2.addEventHandler(this, "imgButton2_click1");
  label1 = new GLabel(this, 255, 376, 120, 30);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Current Mode : 1");
  label1.setOpaque(true);
  pumpbut = new GButton(this, 147, 376, 105, 26);
  pumpbut.setText("Pump On/Off");
  pumpbut.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  pumpbut.addEventHandler(this, "pumpbut_click1");
}

// Variable declarations 
// autogenerated do not edit
GImageButton imgButton1; 
GButton torquebut; 
GImageButton imgButton2; 
GLabel label1; 
GButton pumpbut; 

  public void settings() {  size(800, 460); }
  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "keyboardcontrol" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
